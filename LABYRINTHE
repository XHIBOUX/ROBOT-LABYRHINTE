#include <Servo.h>

Servo myservo;

int pos = 0;
int URPWM = 3;
int URTRIG = 5;
boolean up = true;
unsigned long time;
unsigned long urmTimer = 0;

unsigned int Distance = 0;
uint8_t EnPwmCmd[4] = {0x44,0x22,0xbb,0x01};

int speedPin_M1 = 5;     //M1 Speed Control
int speedPin_M2 = 6;     //M2 Speed Control
int directionPin_M1 = 4; //M1 Direction Control
int directionPin_M2 = 7; //M2 Direction Control

void setup() {
  Serial.begin(9600);
  myservo.attach(9);
  PWM_Mode_Setup();
  
  pinMode(speedPin_M1, OUTPUT);
  pinMode(speedPin_M2, OUTPUT);
  pinMode(directionPin_M1, OUTPUT);
  pinMode(directionPin_M2, OUTPUT);

  carStop();
}

void loop() {
  if (millis() - time >= 20) {
    time = millis();
    if (up) {
      if (pos >= 0 && pos <= 179) {
        pos += 1;
        myservo.write(pos);
      }
      if (pos > 179) up = false;
    } else {
      if (pos >= 1 && pos <= 180) {
        pos -= 1;
        myservo.write(pos);
      }
      if (pos < 1) up = true;
    }
  }

  if (millis() - urmTimer > 50) {
    urmTimer = millis();
    PWM_Mode();
    navigateMaze();
  }
}

void PWM_Mode_Setup() {
  pinMode(URTRIG, OUTPUT);
  digitalWrite(URTRIG, HIGH);
  pinMode(URPWM, INPUT);

  for (int i = 0; i < 4; i++) {
    Serial.write(EnPwmCmd[i]);
  }
}

void PWM_Mode() {
  digitalWrite(URTRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(URTRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(URTRIG, LOW);

  unsigned long DistanceMeasured = pulseIn(URPWM, LOW);

  if (DistanceMeasured == 50000) {
    Serial.print("Invalid");
  } else {
    Distance = DistanceMeasured / 50;
  }
  Serial.print("Distance=");
  Serial.print(Distance);
  Serial.println("cm");
}

void carStop() {
  digitalWrite(speedPin_M2, 0);
  digitalWrite(directionPin_M1, LOW);
  digitalWrite(speedPin_M1, 0);
  digitalWrite(directionPin_M2, LOW);
}

void carBack(int leftSpeed, int rightSpeed) {
  analogWrite(speedPin_M2, leftSpeed);
  digitalWrite(directionPin_M1, HIGH);
  analogWrite(speedPin_M1, rightSpeed);
  digitalWrite(directionPin_M2, HIGH);
}

void carAdvance(int leftSpeed, int rightSpeed) {
  analogWrite(speedPin_M2, leftSpeed);
  digitalWrite(directionPin_M1, LOW);
  analogWrite(speedPin_M1, rightSpeed);
  digitalWrite(directionPin_M2, LOW);
}

void carTurnLeft(int leftSpeed, int rightSpeed) {
  analogWrite(speedPin_M2, leftSpeed);
  digitalWrite(directionPin_M1, LOW);
  analogWrite(speedPin_M1, rightSpeed);
  digitalWrite(directionPin_M2, HIGH);
}

void carTurnRight(int leftSpeed, int rightSpeed) {
  analogWrite(speedPin_M2, leftSpeed);
  digitalWrite(directionPin_M1, HIGH);
  analogWrite(speedPin_M1, rightSpeed);
  digitalWrite(directionPin_M2, LOW);
}

void navigateMaze() {
  if (Distance < 10) { // If obstacle is detected within 10 cm
    carStop();
    delay(500);
    carBack(100, 100); // Move backward
    delay(500);
    carTurnRight(150, 150); // Turn right
    delay(500);
  } else {
    carAdvance(100, 100); // Move forward
  }
}
